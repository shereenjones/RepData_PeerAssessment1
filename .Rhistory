## 2. Get the value of the matrix
## 3. Set the value of the inverse of the matrix
## 4. Get the value of the inverse of the matrix
## Calculate and Cache inverse of matrix x
makeCacheMatrix <- function(x = matrix()) {
## inv <<- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Compute the inverse of matrix x.
## If the inverse has already been calculated, return the
## inverse from the cache.  Otherwise calculate inverse
## and update cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
my_inv <- NULL
## if this is the first time the function is run
## initialize key variables
if (!exists("inv")) {
inv <<- NULL
}
if (!exists("prev_x")) {
prev_x <<- NULL
}
cm <- makeCacheMatrix(x)
## check if matrix has changed
if (identical(x, prev_x)) {
my_inv <- cm$getinverse()
}
if (!is.null(my_inv)) {
message ("getting cached data")
return(my_inv)    ## return inverse from cache
}
## new matrix - cache data
prev_x <<- x
data <- cm$get()
inv <- solve(data, ...)
cm$setinverse(inv)
inv                     ## calculate and return inverse
}
cacheSolve(p1)
cacheSolve(p1)
cacheSolve(p1)
p2 <- matrix(c(2,3,3,4),2,2)
cacheSolve(p2)
cacheSolve(p2)
cacheSolve(p1)
cacheSolve(p1)
p3 <- matrix (c(1,0,5,2,1,6,3,4,0),3,3)
p3
cacheSolve(p3)
cacheSolve(p3)
cacheSolve(p2)
cacheSolve(p2)
p1 %*% cacheSolve(p1)
p1 %*% cacheSolve(p1)
p2 %*% cacheSolve(p2)
p2 %*% cacheSolve(p2)
cacheSolve(p2) %*% cacheSolve(p1)
cacheSolve(p1)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data)
x$setsolve(s)
s
}
p1 <- matrix (c(1,2,3,4), 2, 2)
cacheSolve(p1)
library(datasets)
with (airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")  ## Add a title
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind, Ozone, col=blue))
with(subset(airquality,Month==5),points(Wind, Ozone, col="blue"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City"), type="n")
pchshow
pchshow()
pchShow
pchShow()
points()
points
example(points)
## plot3.R
## Outline of Project
##      Download the zip file
##      Unzip the specific data file in question
##      Read in the data pertaining to the 2 days
##      Create the plots as shown
## Assumes you are in your working directory
install.packages("downloader")
library(downloader)
## Download the zip file if data file not already in working directory
datafile <- "household_power_consumption.txt"
if (!file.exists(datafile)) {
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
destfile <- "household_power_consumption.zip"
download(url, destfile, mode = "wb")
## unzip the file
unzip(destfile)
}
## read in the header
header <- as.vector(read.table(datafile, sep=";", nrows=1))
## read in the data file - records for 2007-02-01 and 2007-02-02
df <- read.table(datafile, sep = ";", na.strings="?", skip=66637, nrows=2880)
h1 <- NULL
for (i in 1:9) { h1 <- c(h1, as.character(header[[i]]))}
colnames(df) <- h1  # set column names
## Plot 3
df$time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
plot(df$time, df$Sub_metering_1, xlab="", ylab="Energy sub metering", type="l")
lines(df$time, df$Sub_metering_2, col="red")
lines(df$time, df$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red", "blue"))
## Save plot to png
dev.copy(png, file="plot3.png", width=480, height=480, units="px")
dev.off()
setwd("C:/Users/sjones/DataScienceSpecializationCourses")
d <- read.csv("household_power_consumption.txt", sep=";", na.strings=c("?"))
# Get just the 2 days we care about and free up memory
d2 <- rbind(d[d$Date == "1/2/2007",], d[d$Date == "2/2/2007",])
rm(d)
# Create a date/time field
d2$Date <- as.Date(d2$Date, "%d/%m/%Y")
d2$DateTime <- strptime(paste(d2$Date2, d2$Time), "%Y-%m-%d %H:%M:%S")
library(lattice)
head(d2)
xyplot(Date, Global_active_power, data=d2)
xyplot(d2$Date, d2$Global_active_power, data=d2)
d2$Date <- as.factor(d2$Date)
xyplot(d2$Date, d2$Global_active_power, data=d2)
xyplot(d2$Global_actie_power data=d2)
xyplot(Global_active_power data=d2)
xyplot(Global_active_power, data=d2)
xyplot(d2$Global_active_power, data=d2)
d <- read.csv("household_power_consumption.txt", sep=";", na.strings=c("?"))
# Get just the 2 days we care about and free up memory
d2 <- rbind(d[d$Date == "1/2/2007",], d[d$Date == "2/2/2007",])
rm(d)
# Create a date/time field
d2$Date <- as.Date(d2$Date, "%d/%m/%Y")
d2$DateTime <- strptime(paste(d2$Date2, d2$Time), "%Y-%m-%d %H:%M:%S")
head(d2)
xyplot(Voltage ~ Global_active_power, data=d2)
g2 <- xyplot(Voltage ~ Global_active_power, data=d2)
str(g2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(displ,    hwy,	data	=	mpg,	color	=	drv)
qplot(displ, hwy, data=mpg, color=drv) + geom_smooth()
setwd("C:/Users/sjones/DataScienceSpecializationCourses")
R.version.string
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical_Inference")
pwd
pwd()
getwd()
install_course_zip("c:/Users/sjones/Documents/R/win-library/3.1/swirl/Courses/swirl_courses-master.zip", multi=TRUE, which_course="Statistical Inference")
swirl()
33/36
deck
52
1/13
0
12/52
3/51
2/51
33/36
deck
52
4/52
0
12/52
2/51
.64
.64
mypdf
integrate(mypdf, lower=0, upper=1.6)
sqrt(2)
.997*.001
(1-.985)*(1-.001)
.000997/(.00097+.014985)
.000997/(.000997+.014985)
1/6
3.5
expect_dice_now
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc, lower=0, upper=2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- dice_fair * dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
sd(apply(matrix(ronorm(10000),1000),1,mean))
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
install.packages("installr")
library(installr)
updateR()
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("ggplot2")
sys.getenv("http_proxy")
S'ys.getenv("http_proxy")
''
Sys.getenv("http_proxy")
Sys.getenv("http_user")
Sys.getenv("http_proxy_user")
Sys.setenv(http_proxy_user=ask)
Sys.setenv(http_proxy_user="ask")
Sys.getenv("http_proxy_user")
Sys.getenv("http_user")
Sys.getenv("http_proxy")
Sys.setenv("http_proxy"="http://200.196.45.14:8080")
Sys.setenv("http_proxy"="http://200.196.45.15:8080")
install.packages("knitr")
install.packages("rmarkdown")
setwd("C:/Users/sjones/DataScienceSpecializationCourses")
df <- read.csv("activity.csv")
setwd("C:/Users/sjones/datasciencecoursera/RepData_PeerAssessment1")
df <- read.csv("activity.csv")
df$interval <- as.factor(df$interval)
df2a <- aggregate(df$steps ~ df$interval, data=df, mean)
df2b <- aggregate(df$steps ~ df$interval, data=df, sum)
colnames(df2a) <- c("interval","average_steps")
colnames(df2b) <- c("interval","total_steps")
plot(df2a$interval, df2a$average_steps, type="l", main="Average Steps per Interval", xlab="Interval", ylab="Average Steps")
plot(df2a$interval, df2a$average_steps, type="b", main="Average Steps per Interval", xlab="Interval", ylab="Average Steps")
plot(df2a$interval, df2a$average_steps, main="Average Steps per Interval", xlab="Interval", ylab="Average Steps")
df2a$interval
df2a$average_steps
plot(df2a)
plot(df2a, type="l")
plot(df2a, type='l')
plot(df2a, type="c")
plot(df2a, type="c",col="blue")
plot(df2a, type="p",col="blue")
df3 <- merge(df, df2a, by="interval")
for (i in row.names(df3[is.na(df3$steps),])) {df3[i,2] <- df3[i,4]}
df4 <- df3[,1:3]
df4a <- aggregate(df4$steps ~ df4$date, data=df4, sum)
colnames(df4a) <- c("date", "total_steps")
hist(df4a$total_steps, col="blue", xlab="Number of Steps per Day", ylab="Frequency")
library(ggplot2)
df4$date <- as.Date(df4$date, "%Y-%m-%d")
df4$wday <- weekdays(df4$date)
y1 <- row.names(df4[(df4$wday =="Sunday" | df4$wday == "Saturday"),])
y2 <- row.names(df4[(df4$wday !="Sunday" & df4$wday != "Saturday"),])
df4$wdaytype <- "NA"
df4[y1,5] <- "Weekend"
df4[y2,5] <- "Weekday"
df4$wdaytype <- as.factor(df4$wdaytype)
df5 <- aggregate (df4$steps ~ df4$interval + df4$wdaytype, data=df4, mean)
colnames(df5) <- c("interval", "wdaytype", "average_steps")
qplot(interval, average_steps, data=df5, facets= wdaytype ~ .) + geom_line(linetype = 1)
plot(df5$interval, df5$average_steps, col="blue")
plot(df5$interval, df5$average_steps, col="blue", type="l")
plot(df5$interval, df5$average_steps, col="blue", type="b")
plot(df5$interval, df5$average_steps, col="blue", type="h")
plot(df5$interval, df5$average_steps, col="blue", type="s")
plot(df5$interval, df5$average_steps, col="blue", type="S")
plot(df5$interval, df5$average_steps, col="blue", type="S")
plot(df5$interval, df5$average_steps, col="red", type="S")
plot(df5$interval, df5$average_steps, col="red", type="p")
plot(df5$interval, df5$average_steps, col="red", type="l")
x <- c(1:5); y - x
x <- c(1:5); y <- x
par(pch=22, col="red")
par(mfrow=c(2,4))
opts = c("p","l","o","b","c","s","S","h")
for (i in 1:length(opts)) {}
for (i in 1:length(opts)) {
heading = paste("type=",opts[i])
plot(x.y, type="n", main=heading)
lines(x, y, type=opts[i])
}
for (i in 1:length(opts)) {
heading = paste("type=",opts[i])
plot(x, y, type="n", main=heading)
lines(x, y, type=opts[i])
}
show(df5)
summarize(df5)
summary(df5)
plot(as.numeric(df5$interval), df5$average_steps, col="red", type="l")
par(mfrow=c(1,1))
plot(as.numeric(df5$interval), df5$average_steps, col="red", type="l")
plot(as.numeric(df5$interval), df5$average_steps, col="red", type="b")
head(Df)
head(df)
qplot(interval, average_steps, data=df5, facets= wdaytype ~ .) + geom_line(linetype = 1)
qplot(as.numeric(interval), average_steps, data=df5, facets= wdaytype ~ .) + geom_line(linetype = 1)
head(df)
tail(df)
summary(df)
plot(df$date, df$steps, type="l")
df$date <- as.Date(df$date, "%Y-%m-%d")
plot(df$date, df$steps, type="l")
install.packages("RJSONIO")
install.packages(c("PKI", "RCurl", "packrat", "rstudioapi", "rsconnect"))
install.packages("shinyapps")
warnings()
install.packages("devtools")
install.packages("XML")
install.packages("XML")
devtools::install_github('rstudio/shinyapps')
devtools::install_github("rstudio/shinyapps")
install.packages("XML")
install.packages("XML")
devtools::install_github("rstudio/shinyapps")
find_rtools()
library(devtools)
find_rtools()
devtools::install_github("rstudio/shinyapps")
devtools::install_github("rstudio/shinyapps")
file.edit("~/.Rprofile")
readRenviron()
readRenviron("c:/users/sjones/My Documents")
readRenviron("c:/users/sjones/My Documents/")
readRenviron("c:/cygwin/lib/R/etc/")
readRenviron("c:/cygwin/lib/R/etc/.Renviron")
readRenviron("c:/users/sjones/My Documents/.Renviron")
Sys.getenv()
file.edit("~/.Rprofile")
Sys.unsetenv(http_proxy)
Sys.unsetenv("http_proxy")
devtools::install_github("rstudio/shinyapps")
Sys.getenv()
Sys.unsetenv("http_proxy_user")
Sys.getenv()
library(shinyapps)
install.packages("shiny")
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("downloader")
library(downloader)
setwd("C:/Users/sjones/DataScienceSpecializationCourses")
setwd("C:/Users/sjones/DataScienceSpecializationCourses/Course 9 - Developing Data Products")
rnApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(manipulate)
myplot <- function(s)  {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myplot(s), s = slider(0, 2, step = 0.1))
manipulate(myplot, s = slider(0, 2, step = 0.1))
manipulate(myplot(s), x.s = slider(0, 2, step = 0.1))
airquality
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
setwd("C:/Users/sjones/datasciencecoursera/")
dir()
setwd("./courses")
dir()
setwd("../09_DevelopingDataProducts")
setwd("./09_DevelopingDataProducts")
dir()
setwd("./lectures")
dir()
setwd("..")
dir()
setwd("./manipulate")
dir()
setwd("../..")
dir()
setwd("./07_RegressionModels")
dir()
setwd("./project")
setwd("..")
setwd("./01_01_introduction")
dir()
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("UsingR")
library(UsingR)
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
View(cacheSolve)
df <- read.csv("activity.csv")
setwd("C:/Users/sjones/datasciencecoursera/RepData_PeerAssessment1")
df <- read.csv("activity.csv")
library(plyr)
library(reshape2)
df$date <- as.Date(df$date, "%Y-%m-%d")
df1a <- aggregate(df$steps ~ df$date, data=df, sum)
colnames(df1a) <- c("date", "total_steps")
hist(df1a$total_steps, col="blue", breaks=20, xlab="Number of Steps per Day", ylab="Frequency")
hist(df1a$total_steps, col="blue", breaks=10, xlab="Number of Steps per Day", ylab="Frequency")
hist(df1a$total_steps, col="blue", xlab="Number of Steps per Day", ylab="Frequency")
hist(df1a$total_steps, col="blue", xlab="Total Steps per Day", ylab="Frequency", main="Total Steps Per Day Frequency")
df1_mean <- round(mean(df1a$total_steps),0)
df1_mean
df1_median <- median(df1a$total_steps)
df1_median
df2a <- aggregate(df$steps ~ df$interval, data=df, mean)
df2b <- aggregate(df$steps ~ df$interval, data=df, sum)
colnames(df2a) <- c("interval","average_steps")
colnames(df2b) <- c("interval","total_steps")
plot(df2a$interval, df2a$average_steps, type="l", main="Average Steps per Interval", xlab="Interval", ylab="Average Steps")
plot(df2a$interval, df2a$average_steps, type="l", main="Average Steps per Interval", xlab="Interval", ylab="Average Steps")
axis (side=1, labels=xlabels)
xlabels <- c("00:00","05:00", "10:00", "15:00", "20:00")
plot(df2a$interval, df2a$average_steps, type="l", main="Average Steps per Interval", xlab="Interval", ylab="Average Steps")
axis (side=1, labels=xlabels)
xlabels <- c("00:00","05:00", "10:00", "15:00", "20:00")
plot(df2a$interval, df2a$average_steps, type="l", main="Average Steps per Interval", xlab="Interval", ylab="Average Steps")
axis (side=1, labels=xlabels, at=seq(0,2000, 500))
plot(df2a$interval, df2a$average_steps, type="l", main="Average Steps per Interval", xlab="Interval", ylab="Average Steps", xaxt="n")
axis (side=1, labels=xlabels, at=seq(0,2000, 500))
df3 <- merge(df, df2a, by="interval")
for (i in row.names(df3[is.na(df3$steps),])) {df3[i,2] <- df3[i,4]}
df4 <- df3[,1:3]
df4a <- aggregate(df4$steps ~ df4$date, data=df4, sum)
colnames(df4a) <- c("date", "total_steps")
hist(df4a$total_steps, col="blue", xlab="Number of Steps per Day", ylab="Frequency")
df4a_mean <- round(mean(df4a$total_steps),0)
df4a_median <- median(df4a$total_steps)
df4$date <- as.Date(df4$date, "%Y-%m-%d")
df4$wday <- weekdays(df4$date)
y1 <- row.names(df4[(df4$wday =="Sunday" | df4$wday == "Saturday"),])
y2 <- row.names(df4[(df4$wday !="Sunday" & df4$wday != "Saturday"),])
df4$wdaytype <- "NA"
df4[y1,5] <- "Weekend"
df4[y2,5] <- "Weekday"
df4$wdaytype <- as.factor(df4$wdaytype)
df5 <- aggregate (df4$steps ~ df4$interval + df4$wdaytype, data=df4, mean)
colnames(df5) <- c("interval", "wdaytype", "average_steps")
library(ggplot2)
qplot(interval, average_steps, data=df5, color=wdaytype, facets= wdaytype ~ .) + geom_line(linetype = 1)
ggplot(data=df5, aes(interval, average_steps, colour=wdaytype) )
ggplot(data=df5, aes(x=interval, y=average_steps, group=wdaytype, colour=wdaytype)) + geom_line()
